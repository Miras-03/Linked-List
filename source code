#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
template<class T>
class List
{
public:
	List();
	~List();
	void AddLast(T data);
	void DeleteFront();
	void Clear();
	int GetElementCount() { return elementCount; }
	T& operator[](const int index);
private:
	template<class T>
	class Node
	{
	public:
		T data;
		Node* pNext;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	Node<T>* head;
	int elementCount;
};

template<class T>
List<T>::List()
{
	head = nullptr;
	elementCount = 0;
}

template<class T>
List<T>::~List()
{
	Clear();
}

template<class T>
void List<T>::AddLast(T data)
{
	if (head == nullptr)
		head = new Node<T>(data);
	else
	{
		Node<T>* currentElement = this->head;
		while (currentElement->pNext != nullptr)
			currentElement = currentElement->pNext;
		currentElement->pNext = new Node<T>(data);
	}
	++elementCount;
}

template<class T>
void List<T>::DeleteFront()
{
	Node<T>* temp = this->head;
	head = head->pNext;
	delete temp;
	--elementCount;
}

template<class T>
void List<T>::Clear()
{
	while (head)
		DeleteFront();
}

template<class T>
T& List<T>::operator[](const int index)
{
	int counter = 0;
	Node<T>* currentElement = this->head;
	while (currentElement != nullptr)
	{
		if (counter == index)
			return currentElement->data;
		currentElement = currentElement->pNext;
		++counter;
	}
}

int main()
{
	List<int> linkedList;
	linkedList.AddLast(2);
	linkedList.AddLast(5);
	linkedList.AddLast(7);
	for (int i = 0; i < linkedList.GetElementCount(); i++)
		printf("%d ", linkedList[i]);
	linkedList.Clear();
	printf("\nAfter called Clear method \n");
	for (int i = 0; i < linkedList.GetElementCount(); i++)
		printf("%d ", linkedList[i]);
	system("pause");
}
