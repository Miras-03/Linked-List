#include<iostream>
template<class T>
class List
{
public:
	List();
	~List();
	void AddEnd(T data);
	void DeleteFront();
	void Clear();
	int GetSize() { return sizeElement; }
	T& operator[](const int index);
private:
	template<class T> 
	class Node
	{
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	Node<T>* head;
	int sizeElement;
};

template<class T>
List<T>::List()
{
	head = nullptr;
	sizeElement = 0;
}

template<class T>
List<T>::~List()
{
	Clear();
}

template<class T>
void List<T>::AddEnd(T data)
{
	if (head == nullptr)
		head = new Node<T>(data);
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
			current = current->pNext;
		current->pNext = new Node<T>(data);
	}	
	++sizeElement;
}

template<class T>
void List<T>::DeleteFront()
{
	Node<T>* temp = head;
	head = head->pNext;
	delete temp;
	--sizeElement;
}

template<class T>
void List<T>::Clear()
{
	while (sizeElement)
		DeleteFront();
}

template<class T>
T& List<T>::operator[](const int index)
{
	int counter = 0;
	Node<T>* current = this->head;
	while (current != nullptr)
	{
		if (counter == index)
			return current->data;
		current = current->pNext;
		++counter;
	}
}

int main()
{
	List<int> linkedList;
	linkedList.AddEnd(5);
	linkedList.AddEnd(15);
	linkedList.AddEnd(30);
	printf("First element %d\n", linkedList[0]);
	printf("Size element %d\n", linkedList.GetSize());
	linkedList.Clear();
	printf("Size element after clear %d\n", linkedList.GetSize());
	system("pause");
}
